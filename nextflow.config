/*
 * -------------------------------------------------
 *  luslab/nf-cut-tag Nextflow config file
 * -------------------------------------------------
 */

 includeConfig 'luslab-nf-modules/configs/luslab-base.config'

// Main parameters
params {
  // General
  append_outdir = true // Append timestamp to results folder
  tracedir = "${params.outdir}/_pipeline_info" // Trace directy default location

  // Logging options
  monochrome_logs = false

  // Computing options - defaults only
  verbose = false

  //Set config path
  multiqc_config="$baseDir/assets/multiqc_config.yml"

  // **********  PIPELINE RUN PARAMS **********

  // Boilerplate options
  enable_conda               = false
  publish_dir_mode           = 'copy'
  singularity_pull_docker_container = true

  bt2_index = ''

  // Trimming
  clip_r1                    = 0
  clip_r2                    = 0
  three_prime_clip_r1        = 0
  three_prime_clip_r2        = 0
  trim_nextseq               = 0
  save_trimmed               = false
  skip_trimming              = false

  normalisation_c = 1000000

  modules {
    'picard' {
            args          = ""
            suffix        = "_marked"
            publish_dir   = "picard"
    }
    'trimgalore' {
            args          = "--fastqc"
            suffix        = "_trimmed"
            publish_files = ['txt':'', 'html':'fastqc', 'zip':'fastqc']
      }
      'bowtie2_align_exp'{
            args             = "--end-to-end --very-sensitive --no-mixed --no-discordant --phred33 -I 10 -X 700"
            suffix           = "exp"
            publish_dir      = "bowtie2_align_exp"
            publish_results  = "all"
            unmapped_suffix  = ""
            output_sam       = false
      }
      'bowtie2_align_spike_in'{
            args             = "--end-to-end --very-sensitive --no-overlap --no-dovetail --no-mixed --no-discordant --phred33 -I 10 -X 700"
            suffix           = "spike_in"
            publish_dir      = "bowtie2_align_spike_in"
            publish_results  = "all"
            unmapped_suffix  = ""
            output_sam       = false
      }
    'multiqc_custom' {
            publish_dir      = "multiqc"
            publish_results  = "all"
            args             = "-v"
            custom_config    = true
        } 
    'awk_fai' {
            args             = "-v OFS='\\t' {'print \$1,\$2'}"
            outfile_name     = ""
            write_to_output  = true
            publish_dir      = "awk"
            publish_results  = "all"
        }
    'seacr' {
            args            = "norm stringent"
            suffix          = ".bed"
            publish_dir     = "seacr"
            publish_results = "all"
        }
    
    }
}

// Static details about the pipeline
manifest {
  name = 'luslab/nf-cut-tag'
  author = 'Charlotte West'
  homePage = 'https://github.com/luslab/nf-cut-tag'
  description = 'Nextflow CUT&Tag analysis pipeline.'
  nextflowVersion = '>=20.07.01'
  version = '0.1'
}

profiles {
  docker { 
    docker.enabled = true
    }
  singularity {
    singularity.enabled = true
    singularity.autoMounts = true
    }
  test { includeConfig 'configs/hg38-chr20-test.config' }
  test_chr7 { includeConfig 'configs/hg38-chr7-test.config' }
  test_hg38 { includeConfig 'configs/hg38-test.config' }
}

process {
  cpus = { check_max( 1, 'cpus' ) }
  memory = { check_max( 4.GB, 'memory' ) }
  time = { check_max( 2.h * task.attempt, 'time' ) }

  // Place process specific resource strategies here
  withName: fastqc {
    cpus = { check_max ( 8, 'cpus' ) }
  }

  withName: TRIMGALORE {
    cpus = { check_max ( 4, 'cpus' ) }
  }

  withName: bt2_build_exp {
    cpus = { check_max ( 8, 'cpus' ) }
    memory = { check_max ( 8.GB, 'memory' ) }
  }

  withName: bt2_build_spike {
    cpus = { check_max ( 8, 'cpus' ) }
    memory = { check_max ( 8.GB, 'memory' ) }
  } 

  withName: bt2_align_exp {
    cpus = { check_max ( 32, 'cpus' ) } 
    memory = { check_max ( 16.GB, 'memory' ) }
  }

  withName: bt2_align_spike_in {
    cpus = { check_max ( 16, 'cpus' ) } 
    memory = { check_max ( 16.GB, 'memory' ) }
  }

  withName: awk {
    cpus = { check_max ( 2, 'cpus' ) } //from 1
  }

  withName: awk_fai {
    cpus = { check_max ( 1, 'cpus' ) }
  }

  withName: awk_file {
    cpus = { check_max ( 1, 'cpus' ) }
  }

  withName: picard_mark_target {
    memory = { check_max ( 12.GB, 'memory' ) }
  } 
  withName: picard_dedup_target {
    memory = { check_max ( 12.GB, 'memory' ) }
  }
  withName: picard_mark_spike {
    memory = { check_max ( 12.GB, 'memory' ) }
  }
  withName: picard_dedup_spike {
    memory = { check_max ( 12.GB, 'memory' ) }
  } 
}

profiles {
  docker { 
    docker.enabled = true
    }
  singularity {
    singularity.enabled = true
    singularity.autoMounts = true
    }
  test { includeConfig 'configs/hg38-chr20-test.config' }
  test_chr7 { includeConfig 'configs/hg38-chr7-test.config' }
  test_hg38 { includeConfig 'configs/hg38-test.config' }
  test_small { includeConfig 'configs/hg38-chr20-small.config' }
}

def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'gpus') {
    try {
      return Math.min( obj, params.max_gpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max gpus '${params.max_gpus}' is not valid! Using default value: $obj"
      return obj as String
    }
  }
}
