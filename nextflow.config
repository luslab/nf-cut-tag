/*
 * -------------------------------------------------
 *  luslab/nf-cut-tag Nextflow config file
 * -------------------------------------------------
 */

includeConfig 'luslab-nf-modules/configs/luslab-base.config'
//includeConfig 'luslab-nf-modules/configs/module-defaults.config'
//includeConfig 'local-tests.config'

// Main parameters
params {
  // General
  append_outdir = true // Append timestamp to results folder
  tracedir = "${params.outdir}/_pipeline_info" // Trace directy default location

  // Logging options
  monochrome_logs = false

  // Computing options - defaults only
  verbose = true
  max_memory = 8.GB
  max_cpus = 4

  //Set config path
  multiqc_config="$baseDir/assets/multiqc_config.yml"
}

// Module params
params {
  modules {
    'multiqc_custom' {
            publish_dir      = "multiqc"
            publish_results  = "all"
            args             = "-v"
            custom_config    = true
        }
    'bowtie2_align_exp'{
            args             = "--end-to-end --very-sensitive --no-mixed --no-discordant --phred33 -I 10 -X 700"
            suffix           = "exp"
            publish_dir      = "bowtie2_align_exp"
            publish_results  = "all"
            unmapped_suffix  = ""
            output_sam       = false
        }
    'bowtie2_align_spike_in'{
            args             = "--end-to-end --very-sensitive --no-overlap --no-dovetail --no-mixed --no-discordant --phred33 -I 10 -X 700"
            suffix           = "spike_in"
            publish_dir      = "bowtie2_align_spike_in"
            publish_results  = "all"
            unmapped_suffix  = ""
            output_sam       = false
        }
    'samtools_faidx' {
            args             = ""
            publish_dir      = "samtools_faidx"
            publish_results  = "all"
        }
    'awk_fai' {
            args             = "-v OFS='\\t' {'print \$1,\$2'}"
            outfile_name     = ""
            write_to_output  = true
            publish_dir      = "awk"
            publish_results  = "all"
        }
    'seacr' {
            args            = "norm stringent"
            suffix          = ".bed"
            publish_dir     = "seacr"
            publish_results = "all"
        }
    
    }
  normalisation_c = 1000000
}



// Static details about the pipeline
manifest {
  name = 'luslab/nf-cut-tag'
  author = 'Charlotte West'
  homePage = 'https://github.com/luslab/nf-cut-tag'
  description = 'Nextflow CUT&Tag analysis pipeline.'
  nextflowVersion = '>=20.07.01'
  version = '0.1'
}

// // Enable Docker
// docker.enabled = true

process {
  // Memory and time increases with the number of retrys
  cpus = { check_max( 2, 'cpus' ) }
  memory = { check_max( 4.GB * task.attempt, 'memory' ) }
  time = { check_max( 2.h * task.attempt, 'time' ) }
  
  errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'terminate' }
  maxRetries = 1
  maxErrors = '-1'
  
  // Place process specific resource strategies here
  withName: fastqc {
    cpus = { check_max ( 8, 'cpus' ) }
  }

  withName: bowtie2_align_exp {
    cpus = { check_max ( 8, 'cpus' ) }
    memory = { check_max ( 8.GB * task.attempt, 'memory' ) }
  }

  withName: bowtie2_align_spike_in {
    cpus = { check_max ( 8, 'cpus' ) }
  }

  withName: awk {
    cpus = { check_max ( 1, 'cpus' ) }
  }

  withName: awk_fai {
    cpus = { check_max ( 1, 'cpus' ) }
  }

  withName: awk_file {
    cpus = { check_max ( 1, 'cpus' ) }
  }

  withName: bt2_build_exp {
    cpus = { check_max ( 16, 'cpus' ) }
    memory = { check_max ( 32.GB * task.attempt, 'memory' ) }
  }

  withName: bt2_build_spike_in {
    cpus = { check_max ( 4, 'cpus' ) }
    memory = { check_max ( 8.GB * task.attempt, 'memory' ) }
  }
}

profiles {
  docker { 
    docker.enabled = true
    }
  singularity {
    singularity.enabled = true
    singularity.autoMounts = true
    }
  test { includeConfig 'configs/test.config' }
  chr7_test { includeConfig 'configs/chr7_test.config' }
}

def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'gpus') {
    try {
      return Math.min( obj, params.max_gpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max gpus '${params.max_gpus}' is not valid! Using default value: $obj"
      return obj as String
    }
  }
}
