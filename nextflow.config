/*
 * -------------------------------------------------
 *  luslab/nf-cut-tag Nextflow config file
 * -------------------------------------------------
 */

includeConfig 'luslab-nf-modules/configs/luslab-base.config'
//includeConfig 'luslab-nf-modules/configs/module-defaults.config'
//includeConfig 'local-tests.config'

// Main parameters
params {
  // General
  append_outdir = true // Append timestamp to results folder
  outdir = './results' // Results output directory location
  tracedir = "${params.outdir}/_pipeline_info" // Trace directy default location

  // Logging options
  monochrome_logs = false

  // Computing options - defaults only
  verbose = true
  max_memory = 8.GB
  max_cpus = 4
}

// Static details about the pipeline
manifest {
  name = 'luslab/nf-cut-tag'
  author = 'Charlotte West'
  homePage = 'https://github.com/luslab/nf-cut-tag'
  description = 'Nextflow CUT&Tag analysis pipeline.'
  nextflowVersion = '>=20.07.01'
  version = '0.1'
}

// Enable Docker
docker.enabled = true

process {
  // Memory and time increases with the number of retrys
  cpus = { check_max( 2, 'cpus' ) }
  memory = { check_max( 4.GB * task.attempt, 'memory' ) }
  time = { check_max( 2.h * task.attempt, 'time' ) }
  
  errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'terminate' }
  maxRetries = 1
  maxErrors = '-1'
  
  // Place process specific resource strategies here
}

def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'gpus') {
    try {
      return Math.min( obj, params.max_gpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max gpus '${params.max_gpus}' is not valid! Using default value: $obj"
      return obj as String
    }
  }
}
